{"ast":null,"code":"import _regeneratorRuntime from \"/Users/davidroberts/projects/GraphQL/ApolloTutorial/fullstack-tutorial/final/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/davidroberts/projects/GraphQL/ApolloTutorial/fullstack-tutorial/final/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/davidroberts/projects/GraphQL/ApolloTutorial/fullstack-tutorial/final/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/davidroberts/projects/GraphQL/ApolloTutorial/fullstack-tutorial/final/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/davidroberts/projects/GraphQL/ApolloTutorial/fullstack-tutorial/final/client/src/containers/book-trips.tsx\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  mutation BookTrips($launchIds: [ID]!) {\\n    bookTrips(launchIds: $launchIds) {\\n      success\\n      message\\n      launches {\\n        id\\n        isBooked\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport { gql, useMutation } from '@apollo/client';\nimport Button from '../components/button';\nimport { cartItemsVar } from '../cache';\nexport const BOOK_TRIPS = gql(_templateObject());\n\nconst BookTrips = ({\n  cartItems\n}) => {\n  const _useMutation = useMutation(BOOK_TRIPS, {\n    variables: {\n      launchIds: cartItems\n    }\n  }),\n        _useMutation2 = _slicedToArray(_useMutation, 2),\n        bookTrips = _useMutation2[0],\n        data = _useMutation2[1].data;\n\n  return data && data.bookTrips && !data.bookTrips.success ? /*#__PURE__*/React.createElement(\"p\", {\n    \"data-testid\": \"message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, data.bookTrips.message) : /*#__PURE__*/React.createElement(Button, {\n    onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return bookTrips();\n\n          case 2:\n            cartItemsVar([]);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    })),\n    \"data-testid\": \"book-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, \"Book All\");\n};\n\nexport default BookTrips;","map":{"version":3,"sources":["/Users/davidroberts/projects/GraphQL/ApolloTutorial/fullstack-tutorial/final/client/src/containers/book-trips.tsx"],"names":["React","gql","useMutation","Button","cartItemsVar","BOOK_TRIPS","BookTrips","cartItems","variables","launchIds","bookTrips","data","success","message"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,WAAd,QAAiC,gBAAjC;AAEA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,YAAT,QAA6B,UAA7B;AAIA,OAAO,MAAMC,UAAU,GAAGJ,GAAH,mBAAhB;;AAeP,MAAMK,SAAmC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmB;AAAA,uBAC/BL,WAAW,CAIvCG,UAJuC,EAKvC;AACEG,IAAAA,SAAS,EAAE;AAAEC,MAAAA,SAAS,EAAEF;AAAb;AADb,GALuC,CADoB;AAAA;AAAA,QACtDG,SADsD;AAAA,QACzCC,IADyC,oBACzCA,IADyC;;AAW7D,SAAOA,IAAI,IAAIA,IAAI,CAACD,SAAb,IAA0B,CAACC,IAAI,CAACD,SAAL,CAAeE,OAA1C,gBACH;AAAG,mBAAY,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0BD,IAAI,CAACD,SAAL,CAAeG,OAAzC,CADG,gBAGH,oBAAC,MAAD;AACE,IAAA,OAAO,wEAAE;AAAA;AAAA;AAAA;AAAA;AAAA,mBACDH,SAAS,EADR;;AAAA;AAEPN,YAAAA,YAAY,CAAC,EAAD,CAAZ;;AAFO;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF,EADT;AAKE,mBAAY,aALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAaD,CAxBD;;AA0BA,eAAeE,SAAf","sourcesContent":["import React from 'react';\nimport { gql, useMutation } from '@apollo/client';\n\nimport Button from '../components/button';\nimport { cartItemsVar } from '../cache';\nimport * as GetCartItemsTypes from '../pages/__generated__/GetCartItems';\nimport * as BookTripsTypes from './__generated__/BookTrips';\n\nexport const BOOK_TRIPS = gql`\n  mutation BookTrips($launchIds: [ID]!) {\n    bookTrips(launchIds: $launchIds) {\n      success\n      message\n      launches {\n        id\n        isBooked\n      }\n    }\n  }\n`;\n\ninterface BookTripsProps extends GetCartItemsTypes.GetCartItems {}\n\nconst BookTrips: React.FC<BookTripsProps> = ({ cartItems }) => {\n  const [bookTrips, { data }] = useMutation<\n    BookTripsTypes.BookTrips,\n    BookTripsTypes.BookTripsVariables\n  >(\n    BOOK_TRIPS,\n    {\n      variables: { launchIds: cartItems },\n    }\n  );\n\n  return data && data.bookTrips && !data.bookTrips.success\n    ? <p data-testid=\"message\">{data.bookTrips.message}</p>\n    : (\n      <Button\n        onClick={async () => {\n          await bookTrips();\n          cartItemsVar([]);\n        }}\n        data-testid=\"book-button\"\n      >\n        Book All\n      </Button>\n    );\n}\n\nexport default BookTrips;"]},"metadata":{},"sourceType":"module"}