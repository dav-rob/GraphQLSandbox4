{"ast":null,"code":"import _objectSpread from \"/Users/davidroberts/projects/GraphQL/ApolloTutorial/fullstack-tutorial/final/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { InMemoryCache, makeVar } from '@apollo/client';\nexport const cache = new InMemoryCache({\n  typePolicies: {\n    Query: {\n      fields: {\n        isLoggedIn: {\n          read() {\n            return isLoggedInVar();\n          }\n\n        },\n        cartItems: {\n          read() {\n            return cartItemsVar();\n          }\n\n        },\n        launches: {\n          keyArgs: false,\n\n          merge(existing, incoming) {\n            let launches = [];\n\n            if (existing && existing.launches) {\n              launches = launches.concat(existing.launches);\n            }\n\n            if (incoming && incoming.launches) {\n              launches = launches.concat(incoming.launches);\n            }\n\n            return _objectSpread(_objectSpread({}, incoming), {}, {\n              launches\n            });\n          }\n\n        }\n      }\n    }\n  }\n});\nexport const isLoggedInVar = makeVar(!!localStorage.getItem('token'));\nexport const cartItemsVar = makeVar([]);","map":{"version":3,"sources":["/Users/davidroberts/projects/GraphQL/ApolloTutorial/fullstack-tutorial/final/client/src/cache.ts"],"names":["InMemoryCache","makeVar","cache","typePolicies","Query","fields","isLoggedIn","read","isLoggedInVar","cartItems","cartItemsVar","launches","keyArgs","merge","existing","incoming","concat","localStorage","getItem"],"mappings":";AAAA,SAASA,aAAT,EAAmCC,OAAnC,QAAkD,gBAAlD;AAEA,OAAO,MAAMC,KAAoB,GAAG,IAAIF,aAAJ,CAAkB;AACpDG,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE;AACLC,MAAAA,MAAM,EAAE;AACNC,QAAAA,UAAU,EAAE;AACVC,UAAAA,IAAI,GAAG;AACL,mBAAOC,aAAa,EAApB;AACD;;AAHS,SADN;AAMNC,QAAAA,SAAS,EAAE;AACTF,UAAAA,IAAI,GAAG;AACL,mBAAOG,YAAY,EAAnB;AACD;;AAHQ,SANL;AAWNC,QAAAA,QAAQ,EAAE;AACRC,UAAAA,OAAO,EAAE,KADD;;AAERC,UAAAA,KAAK,CAACC,QAAD,EAAWC,QAAX,EAAqB;AACxB,gBAAIJ,QAAqB,GAAG,EAA5B;;AACA,gBAAIG,QAAQ,IAAIA,QAAQ,CAACH,QAAzB,EAAmC;AACjCA,cAAAA,QAAQ,GAAGA,QAAQ,CAACK,MAAT,CAAgBF,QAAQ,CAACH,QAAzB,CAAX;AACD;;AACD,gBAAII,QAAQ,IAAIA,QAAQ,CAACJ,QAAzB,EAAmC;AACjCA,cAAAA,QAAQ,GAAGA,QAAQ,CAACK,MAAT,CAAgBD,QAAQ,CAACJ,QAAzB,CAAX;AACD;;AACD,mDACKI,QADL;AAEEJ,cAAAA;AAFF;AAID;;AAdO;AAXJ;AADH;AADK;AADsC,CAAlB,CAA7B;AAmCP,OAAO,MAAMH,aAAa,GACxBP,OAAO,CAAU,CAAC,CAACgB,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ,CADF;AAEP,OAAO,MAAMR,YAAY,GAAGT,OAAO,CAAW,EAAX,CAA5B","sourcesContent":["import { InMemoryCache, Reference, makeVar } from '@apollo/client';\n\nexport const cache: InMemoryCache = new InMemoryCache({\n  typePolicies: {\n    Query: {\n      fields: {\n        isLoggedIn: {\n          read() {\n            return isLoggedInVar();\n          }\n        },\n        cartItems: {\n          read() {\n            return cartItemsVar();\n          }\n        },\n        launches: {\n          keyArgs: false,\n          merge(existing, incoming) {\n            let launches: Reference[] = [];\n            if (existing && existing.launches) {\n              launches = launches.concat(existing.launches);\n            }\n            if (incoming && incoming.launches) {\n              launches = launches.concat(incoming.launches);\n            }\n            return {\n              ...incoming,\n              launches,\n            };\n          }\n        }\n      }\n    }\n  }\n});\n\nexport const isLoggedInVar =\n  makeVar<boolean>(!!localStorage.getItem('token'));\nexport const cartItemsVar = makeVar<string[]>([]);\n"]},"metadata":{},"sourceType":"module"}