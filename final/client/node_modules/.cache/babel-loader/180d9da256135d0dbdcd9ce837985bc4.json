{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/davidroberts/projects/GraphQL/ApolloTutorial/fullstack-tutorial/final/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/davidroberts/projects/GraphQL/ApolloTutorial/fullstack-tutorial/final/client/src/index.tsx\";\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  query IsUserLoggedIn {\\n    isLoggedIn @client\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  extend type Query {\\n    isLoggedIn: Boolean!\\n    cartItems: [ID!]!\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloClient, ApolloProvider, gql, useQuery } from '@apollo/client';\nimport Pages from './pages';\nimport Login from './pages/login';\nimport injectStyles from './styles';\nimport { cache } from './cache';\nexport const typeDefs = gql(_templateObject()); // Set up our apollo-client to point at the server we created\n// this can be local or a remote endpoint\n\nconst client = new ApolloClient({\n  cache,\n  uri: 'http://localhost:4000/graphql',\n  headers: {\n    authorization: localStorage.getItem('token') || '',\n    'client-name': 'Space Explorer [web]',\n    'client-version': '1.0.0'\n  },\n  typeDefs,\n  resolvers: {}\n});\n/**\n * Render our app\n * - We wrap the whole app with ApolloProvider, so any component in the app can\n *    make GraphqL requests. Our provider needs the client we created above,\n *    so we pass it as a prop\n * - We need a router, so we can navigate the app. We're using Reach router for this.\n *    The router chooses between which component to render, depending on the url path.\n *    ex: localhost:3000/login will render only the `Login` component\n */\n\nconst IS_LOGGED_IN = gql(_templateObject2());\n\nfunction IsLoggedIn() {\n  const _useQuery = useQuery(IS_LOGGED_IN),\n        data = _useQuery.data;\n\n  return data.isLoggedIn ? /*#__PURE__*/React.createElement(Pages, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 28\n    }\n  }) : /*#__PURE__*/React.createElement(Login, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 40\n    }\n  });\n}\n\ninjectStyles();\nReactDOM.render( /*#__PURE__*/React.createElement(ApolloProvider, {\n  client: client,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(IsLoggedIn, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }\n})), document.getElementById('root'));","map":{"version":3,"sources":["/Users/davidroberts/projects/GraphQL/ApolloTutorial/fullstack-tutorial/final/client/src/index.tsx"],"names":["React","ReactDOM","ApolloClient","ApolloProvider","gql","useQuery","Pages","Login","injectStyles","cache","typeDefs","client","uri","headers","authorization","localStorage","getItem","resolvers","IS_LOGGED_IN","IsLoggedIn","data","isLoggedIn","render","document","getElementById"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SACEC,YADF,EAGEC,cAHF,EAIEC,GAJF,EAKEC,QALF,QAMO,gBANP;AAQA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAOC,YAAP,MAAyB,UAAzB;AACA,SAASC,KAAT,QAAsB,SAAtB;AAEA,OAAO,MAAMC,QAAQ,GAAGN,GAAH,mBAAd,C,CAOP;AACA;;AACA,MAAMO,MAA2C,GAAG,IAAIT,YAAJ,CAAiB;AACnEO,EAAAA,KADmE;AAEnEG,EAAAA,GAAG,EAAE,+BAF8D;AAGnEC,EAAAA,OAAO,EAAE;AACPC,IAAAA,aAAa,EAAEC,YAAY,CAACC,OAAb,CAAqB,OAArB,KAAiC,EADzC;AAEP,mBAAe,sBAFR;AAGP,sBAAkB;AAHX,GAH0D;AAQnEN,EAAAA,QARmE;AASnEO,EAAAA,SAAS,EAAE;AATwD,CAAjB,CAApD;AAYA;;;;;;;;;;AAUA,MAAMC,YAAY,GAAGd,GAAH,oBAAlB;;AAMA,SAASe,UAAT,GAAsB;AAAA,oBACHd,QAAQ,CAACa,YAAD,CADL;AAAA,QACZE,IADY,aACZA,IADY;;AAEpB,SAAOA,IAAI,CAACC,UAAL,gBAAkB,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAlB,gBAA8B,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAArC;AACD;;AAEDb,YAAY;AACZP,QAAQ,CAACqB,MAAT,eACE,oBAAC,cAAD;AAAgB,EAAA,MAAM,EAAEX,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADF,EAIEY,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  ApolloClient,\n  NormalizedCacheObject,\n  ApolloProvider,\n  gql,\n  useQuery\n} from '@apollo/client';\n\nimport Pages from './pages';\nimport Login from './pages/login';\nimport injectStyles from './styles';\nimport { cache } from './cache';\n\nexport const typeDefs = gql`\n  extend type Query {\n    isLoggedIn: Boolean!\n    cartItems: [ID!]!\n  }\n`;\n\n// Set up our apollo-client to point at the server we created\n// this can be local or a remote endpoint\nconst client: ApolloClient<NormalizedCacheObject> = new ApolloClient({\n  cache,\n  uri: 'http://localhost:4000/graphql',\n  headers: {\n    authorization: localStorage.getItem('token') || '',\n    'client-name': 'Space Explorer [web]',\n    'client-version': '1.0.0',\n  },\n  typeDefs,\n  resolvers: {},\n});\n\n/**\n * Render our app\n * - We wrap the whole app with ApolloProvider, so any component in the app can\n *    make GraphqL requests. Our provider needs the client we created above,\n *    so we pass it as a prop\n * - We need a router, so we can navigate the app. We're using Reach router for this.\n *    The router chooses between which component to render, depending on the url path.\n *    ex: localhost:3000/login will render only the `Login` component\n */\n\nconst IS_LOGGED_IN = gql`\n  query IsUserLoggedIn {\n    isLoggedIn @client\n  }\n`;\n\nfunction IsLoggedIn() {\n  const { data } = useQuery(IS_LOGGED_IN);\n  return data.isLoggedIn ? <Pages /> : <Login />;\n}\n\ninjectStyles();\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <IsLoggedIn />\n  </ApolloProvider>,\n  document.getElementById('root'),\n);\n"]},"metadata":{},"sourceType":"module"}