{"ast":null,"code":"import _slicedToArray from \"/Users/davidroberts/projects/GraphQL/ApolloTutorial/fullstack-tutorial/final/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/davidroberts/projects/GraphQL/ApolloTutorial/fullstack-tutorial/final/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/davidroberts/projects/GraphQL/ApolloTutorial/fullstack-tutorial/final/client/src/pages/login.tsx\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  mutation Login($email: String!) {\\n    login(email: $email) {\\n      id\\n      token\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport { gql, useMutation } from '@apollo/client';\nimport { LoginForm, Loading } from '../components';\nimport { isLoggedInVar } from '../cache';\nexport const LOGIN_USER = gql(_templateObject());\nexport default function Login() {\n  const _useMutation = useMutation(LOGIN_USER, {\n    onCompleted({\n      login\n    }) {\n      if (login) {\n        localStorage.setItem('token', login.token);\n        localStorage.setItem('userId', login.id);\n        isLoggedInVar(true);\n      }\n    }\n\n  }),\n        _useMutation2 = _slicedToArray(_useMutation, 2),\n        login = _useMutation2[0],\n        _useMutation2$ = _useMutation2[1],\n        loading = _useMutation2$.loading,\n        error = _useMutation2$.error;\n\n  if (loading) return /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 23\n    }\n  });\n  if (error) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 21\n    }\n  }, \"An error occurred\");\n  return /*#__PURE__*/React.createElement(LoginForm, {\n    login: login,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 10\n    }\n  });\n}","map":{"version":3,"sources":["/Users/davidroberts/projects/GraphQL/ApolloTutorial/fullstack-tutorial/final/client/src/pages/login.tsx"],"names":["React","gql","useMutation","LoginForm","Loading","isLoggedInVar","LOGIN_USER","Login","onCompleted","login","localStorage","setItem","token","id","loading","error"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,WAAd,QAAiC,gBAAjC;AAEA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,eAAnC;AACA,SAASC,aAAT,QAA8B,UAA9B;AAGA,OAAO,MAAMC,UAAU,GAAGL,GAAH,mBAAhB;AASP,eAAe,SAASM,KAAT,GAAiB;AAAA,uBACML,WAAW,CAI7CI,UAJ6C,EAK7C;AACEE,IAAAA,WAAW,CAAC;AAAEC,MAAAA;AAAF,KAAD,EAAY;AACrB,UAAIA,KAAJ,EAAW;AACTC,QAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,KAAK,CAACG,KAApC;AACAF,QAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+BF,KAAK,CAACI,EAArC;AACAR,QAAAA,aAAa,CAAC,IAAD,CAAb;AACD;AACF;;AAPH,GAL6C,CADjB;AAAA;AAAA,QACvBI,KADuB;AAAA;AAAA,QACdK,OADc,kBACdA,OADc;AAAA,QACLC,KADK,kBACLA,KADK;;AAiB9B,MAAID,OAAJ,EAAa,oBAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAP;AAEX,sBAAO,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAEN,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD","sourcesContent":["import React from 'react';\nimport { gql, useMutation } from '@apollo/client';\n\nimport { LoginForm, Loading } from '../components';\nimport { isLoggedInVar } from '../cache';\nimport * as LoginTypes from './__generated__/login';\n\nexport const LOGIN_USER = gql`\n  mutation Login($email: String!) {\n    login(email: $email) {\n      id\n      token\n    }\n  }\n`;\n\nexport default function Login() {\n  const [login, { loading, error }] = useMutation<\n    LoginTypes.Login,\n    LoginTypes.LoginVariables\n  >(\n    LOGIN_USER,\n    {\n      onCompleted({ login }) {\n        if (login) {\n          localStorage.setItem('token', login.token as string);\n          localStorage.setItem('userId', login.id as string);\n          isLoggedInVar(true);\n        }\n      }\n    }\n  );\n\n  if (loading) return <Loading />;\n  if (error) return <p>An error occurred</p>;\n\n  return <LoginForm login={login} />;\n}\n"]},"metadata":{},"sourceType":"module"}