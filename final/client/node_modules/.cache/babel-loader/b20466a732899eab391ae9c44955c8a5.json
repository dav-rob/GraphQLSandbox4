{"ast":null,"code":"import _regeneratorRuntime from \"/Users/davidroberts/projects/GraphQL/ApolloTutorial/fullstack-tutorial/final/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/davidroberts/projects/GraphQL/ApolloTutorial/fullstack-tutorial/final/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/davidroberts/projects/GraphQL/ApolloTutorial/fullstack-tutorial/final/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/davidroberts/projects/GraphQL/ApolloTutorial/fullstack-tutorial/final/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/davidroberts/projects/GraphQL/ApolloTutorial/fullstack-tutorial/final/client/src/pages/launches.tsx\";\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  query GetLaunchList($after: String) {\\n    launches(after: $after) {\\n      cursor\\n      hasMore\\n      launches {\\n        ...LaunchTile\\n      }\\n    }\\n  }\\n  \", \"\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  fragment LaunchTile on Launch {\\n    __typename\\n    id\\n    isBooked\\n    rocket {\\n      id\\n      name\\n    }\\n    mission {\\n      name\\n      missionPatch\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Fragment, useState } from 'react';\nimport { gql, useQuery } from '@apollo/client';\nimport { LaunchTile, Header, Button, Loading } from '../components';\nexport const LAUNCH_TILE_DATA = gql(_templateObject());\nexport const GET_LAUNCHES = gql(_templateObject2(), LAUNCH_TILE_DATA);\n\nconst Launches = () => {\n  const _useQuery = useQuery(GET_LAUNCHES),\n        data = _useQuery.data,\n        loading = _useQuery.loading,\n        error = _useQuery.error,\n        fetchMore = _useQuery.fetchMore;\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isLoadingMore = _useState2[0],\n        setIsLoadingMore = _useState2[1];\n\n  if (loading) return /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 23\n    }\n  });\n  if (error || !data) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 30\n    }\n  }, \"ERROR\");\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }), data.launches && data.launches.launches && data.launches.launches.map(launch => /*#__PURE__*/React.createElement(LaunchTile, {\n    key: launch.id,\n    launch: launch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  })), data.launches && data.launches.hasMore && (isLoadingMore ? /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }) : /*#__PURE__*/React.createElement(Button, {\n    onClick: /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            setIsLoadingMore(true);\n            _context.next = 3;\n            return fetchMore({\n              variables: {\n                after: data.launches.cursor\n              }\n            });\n\n          case 3:\n            setIsLoadingMore(false);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, \"Load More\")));\n};\n\nexport default Launches;","map":{"version":3,"sources":["/Users/davidroberts/projects/GraphQL/ApolloTutorial/fullstack-tutorial/final/client/src/pages/launches.tsx"],"names":["React","Fragment","useState","gql","useQuery","LaunchTile","Header","Button","Loading","LAUNCH_TILE_DATA","GET_LAUNCHES","Launches","data","loading","error","fetchMore","isLoadingMore","setIsLoadingMore","launches","map","launch","id","hasMore","variables","after","cursor"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AAEA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,MAA7B,EAAqCC,OAArC,QAAoD,eAApD;AAIA,OAAO,MAAMC,gBAAgB,GAAGN,GAAH,mBAAtB;AAgBP,OAAO,MAAMO,YAAY,GAAGP,GAAH,qBAUrBM,gBAVqB,CAAlB;;AAeP,MAAME,QAAiC,GAAG,MAAM;AAAA,oBAM1CP,QAAQ,CAGVM,YAHU,CANkC;AAAA,QAE5CE,IAF4C,aAE5CA,IAF4C;AAAA,QAG5CC,OAH4C,aAG5CA,OAH4C;AAAA,QAI5CC,KAJ4C,aAI5CA,KAJ4C;AAAA,QAK5CC,SAL4C,aAK5CA,SAL4C;;AAAA,oBAUJb,QAAQ,CAAC,KAAD,CAVJ;AAAA;AAAA,QAUvCc,aAVuC;AAAA,QAUxBC,gBAVwB;;AAY9C,MAAIJ,OAAJ,EAAa,oBAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACb,MAAIC,KAAK,IAAI,CAACF,IAAd,EAAoB,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AAEpB,sBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEGA,IAAI,CAACM,QAAL,IACCN,IAAI,CAACM,QAAL,CAAcA,QADf,IAECN,IAAI,CAACM,QAAL,CAAcA,QAAd,CAAuBC,GAAvB,CAA4BC,MAAD,iBACzB,oBAAC,UAAD;AAAY,IAAA,GAAG,EAAEA,MAAM,CAACC,EAAxB;AAA4B,IAAA,MAAM,EAAED,MAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAJJ,EAOGR,IAAI,CAACM,QAAL,IAAiBN,IAAI,CAACM,QAAL,CAAcI,OAA/B,KACCN,aAAa,gBACT,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADS,gBAET,oBAAC,MAAD;AACE,IAAA,OAAO,wEAAE;AAAA;AAAA;AAAA;AACPC,YAAAA,gBAAgB,CAAC,IAAD,CAAhB;AADO;AAAA,mBAEDF,SAAS,CAAC;AACdQ,cAAAA,SAAS,EAAE;AACTC,gBAAAA,KAAK,EAAEZ,IAAI,CAACM,QAAL,CAAcO;AADZ;AADG,aAAD,CAFR;;AAAA;AAOPR,YAAAA,gBAAgB,CAAC,KAAD,CAAhB;;AAPO;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF,EADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAHL,CAPH,CADF;AA2BD,CA1CD;;AA4CA,eAAeN,QAAf","sourcesContent":["import React, { Fragment, useState } from 'react';\nimport { gql, useQuery } from '@apollo/client';\n\nimport { LaunchTile, Header, Button, Loading } from '../components';\nimport { RouteComponentProps } from '@reach/router';\nimport * as GetLaunchListTypes from './__generated__/GetLaunchList';\n\nexport const LAUNCH_TILE_DATA = gql`\n  fragment LaunchTile on Launch {\n    __typename\n    id\n    isBooked\n    rocket {\n      id\n      name\n    }\n    mission {\n      name\n      missionPatch\n    }\n  }\n`;\n\nexport const GET_LAUNCHES = gql`\n  query GetLaunchList($after: String) {\n    launches(after: $after) {\n      cursor\n      hasMore\n      launches {\n        ...LaunchTile\n      }\n    }\n  }\n  ${LAUNCH_TILE_DATA}\n`;\n\ninterface LaunchesProps extends RouteComponentProps {}\n\nconst Launches: React.FC<LaunchesProps> = () => {\n  const {\n    data,\n    loading,\n    error,\n    fetchMore\n  } = useQuery<\n    GetLaunchListTypes.GetLaunchList,\n    GetLaunchListTypes.GetLaunchListVariables\n  >(GET_LAUNCHES);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n\n  if (loading) return <Loading />;\n  if (error || !data) return <p>ERROR</p>;\n\n  return (\n    <Fragment>\n      <Header />\n      {data.launches &&\n        data.launches.launches &&\n        data.launches.launches.map((launch: any) => (\n          <LaunchTile key={launch.id} launch={launch} />\n        ))}\n      {data.launches && data.launches.hasMore && (\n        isLoadingMore\n          ? <Loading />\n          : <Button\n              onClick={async () => {\n                setIsLoadingMore(true);\n                await fetchMore({\n                  variables: {\n                    after: data.launches.cursor,\n                  },\n                });\n                setIsLoadingMore(false);\n              }}\n            >\n              Load More\n            </Button>\n      )}\n    </Fragment>\n  );\n}\n\nexport default Launches;\n"]},"metadata":{},"sourceType":"module"}